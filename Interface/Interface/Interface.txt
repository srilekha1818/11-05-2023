**any SRS(service requirement specification) is an interface.
interface acts as a medium if communication happens through interface evrything goes smoothly.
e.g:a web application can be run by any server(softwares) like tomcat,jboss,wildfly by using servlets api.
we know .class file is executed by jvm(part of jdk software)
in webapplications case:
.class files are executed by jvm(part of special softwares called servers like jboss,glassfish,tomcat)
 from client view,interface is the services that are expecting.
 from application(service provider) view.interface is the services that are offering.
**interface is a contract b/w service provider and client.
customer =>GUI =>bank
**to attain or to get 100% abstraction we use interface .
when we make a class abstract we don't need to use abstract keyword in methods at all as interface gives 100% abstraction.
in he interface class,access modifiers of the methods are by default public and abstract.
interface developer convention to a class e.g:ISample
another class like e.g:SampleImpl implements the interface class.
e.g:class SampleImpl implements ISample
we implement methods of interface class in a class if any of the method of interface class is not implement in the class that
implementing one of two methods should define it as abstract as the other method by default is abstract .
Also,while implementing methods of interface class the method overriding rules should be followed.

interface[100% abstraction]
abstract class[abstract and concrete methods](implements interface)
concrete clas(no abstraction ,extends abstract class)

***a class can extends only one class at a time.
if a class is implementing a interface and extending a class at a time then the order of execution is first comes 
reusability =>extends and then interface =>implements comes to picture because we have to follow the code already been used an then we can implement that if required.
e.g:class StudentImpl extends Class implements IClass;
class StudentImpl implements Class extends IClass gives error.
***a class can extend a class and can implement any no of interfaces simultaneously.
***one interface can extends any number of interfaces at  time.
Interface Methods:
every method is public and abstract inside the interface:
public :to make method available for all implementation class
abstract:implementation class is responsible for providing the implementation.
There are 11 access modifiers in java in total.
Interface Variables:
inside the interface we can define variables.
every variable in the interface is by default public static final.
public:to make it available for implementation class object
static:to access it without using implementation class name.
final:implementation class can access the value without any modification.
as the variable is static and final,it must be initialized at the time of declaration.
since the variable in interface is public static final we cannot use modifiers like private,protected,volatile,transient.

Interface Naming conflicts:
case1:if 2 interfaces contain a method with same signature and same return type 
then only one method implementation is enough in implementation class.
case2:if two interfaces contain a method with same signature but different arguments 
then we have to provide implementation for both methods in implementation 
class and these methods act as overload methods.
case3:if two interfaces contain a method with same signature but different return type 
then it is not possible to implement both interfaces simultaneously.

variables in interface:
two interfaces having variables as with same name,type then it may cause conflicts
 it can be resolved by accessing thenm with interface names.

 we can aslo write interface without any abstract method or any variable.
 Marker Interface:an interface that contains no methods and variables and if our object gets an ability by implementing that
  interface such type of interfaces can be known as marker interfaces.
  marker interface/tag interface/ability interface.
e.g:Serializable,Cloneable,..

By implementing Serializable interface we can send that object across the network and 
we can save state of an object into the file.
By implementing Cloneable interface our object is in a position to provide exactly duplicate cloned object.

how objects get ability?
jvm is responsible for providing required ability.
why jvm is providing ability to marker interfaces?
to reduce complexity of the program.
can we create our own marker interfaces?
we can but we need to customize jvm.
adapter class (it is a design pattern allowed to solve the problem of
 direct implementation of interface methods)
 --------------------------------------------------------------------------------
it is a simple java class that implements an interface only with empty implementation fr every method.
if we implement an interface compulsorily we should give the body for all the methods whether it is required or not.
this approach increase the length of the code and reduces the reusability.
--------------------------------------------------------------------------------------------------
to reduce that length of code we use adapter class .
instead of implementing the interface directly we opt for adapter class .
adapter class is a class that implements the interface and gives dummy implementation for all abstract methods of interface.
if we extend the adapter classes we can easily give body for those methods which are interested in giving the body.

e.g:servlet(i)=>implement=>generic servlet(abstract class) =>extends =>my servlet(class)


















