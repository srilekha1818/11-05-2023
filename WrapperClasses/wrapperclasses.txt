Wrapper class
============
Purpose
 1. To wrap primitives into object form so that we can handle primitives also just
like objects.
 2. To define several utility functions which are required for the primitives.
Constructors
===========
 Almost all the Wrapper class have 2 constructors
 a. one taking primitive type.
 b. one taking String type.
eg: Integer i=new Integer(10);
 Integer i=new Integer("10");
 Double d=new Double(10.5);
 Double d=new Double("10.5");
Note: If String argument is not properly defined then it would result in
RunTimeException called
 "NumberformatException".
eg:: Integer i=new Integer("ten");//RE:NumberFormatException
Wrapper class and its associated constructor
 Byte => byte and String
 Short => short and String
 Integer => int and String
 Long => long and String
 **Float => float ,String and double
 Double => double and String
 **Character=> character
 ***Boolean => boolean and String
eg::
 1) Float f=new Float (10.5f);
 2) Float f=new Float ("10.5f");
 3) Float f=new Float(10.5);
 4) Float f=new Float ("10.5");
eg::
 1) Charcter c=new Character('a');
 2) Character c=new Character("a"); //invalid
eg::
Boolean b=new Boolean(true);
Boolean b=new Boolean(false);
Boolean b1=new Boolean(True);//C.E
Boolean b=new Boolean(False);//C.E
Boolean b=new Boolean(TRUE);//C.E
eg::
 Boolean b1=new Boolean("true");
 Boolean b2=new Boolean("True");
 Boolean b3=new Boolean("false");
 Boolean b4=new Boolean("False");
 Boolean b5=new Boolean("nitin");
 Boolean b6=new Boolean("TRUE");
 System.out.println(b1);//true
 System.out.println(b2);//true
 System.out.println(b3);//false
 System.out.println(b4);//false
 System.out.println(b5);//false
 System.out.println(b6);//true
eg::
class Test
{
public static void main(String[] args)
{
Boolean b1 =new Boolean("yes");//false
Boolean b2 =new Boolean("no");//false
System.out.println(b1);
System.out.println(b2);
System.out.println(b1.equals(b2));//false.equals(false)-> true
System.out.println(b1 == b2);//false
Integer i1 = new Integer(10);
Integer i2 = new Integer(10);
System.out.println(i1);//10
System.out.println(i2);//10
System.out.println(i1.equals(i2));//true
}
}
Note: In case of Boolean constructor, boolean value be treated as true w.r.t to
case insensitive
 part of "true",for all others it would be treated as "false".
Note:
 If we are passing String argument then case is not important and content is not
important.
 If the content is case insensitive String of true then it is treated as true in
all other cases it is treated as false.
Note: In case of Wrapper class,toString() is overriden to print the data.
 In case of Wrapper class,equals() is overriden to check the content.
 Just like String class, Wrapper classes are also treated as "Immutable
class".
Immutable class
=============
 If we create an Object and if we try to make a change, with that change new
object will be created and those changes
 will not reflected in the old copy.
Can we make our userdefined class as Immutable?
 ans. yes possible.
